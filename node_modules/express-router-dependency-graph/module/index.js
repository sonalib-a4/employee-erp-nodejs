import { cruise } from "dependency-cruiser";
import { parse } from "@babel/parser";
import path from "path";
import fs from "fs/promises";
import query from "esquery";
// @ts-ignore
import markdownTable from "markdown-table";
const findRouting = async (filePath) => {
    try {
        const fileContent = await fs.readFile(filePath, "utf-8");
        const AST = parse(fileContent, {
            sourceType: "module",
            plugins: ["jsx", "typescript"]
        });
        const search = (method, AST) => {
            const selector = `CallExpression:has(MemberExpression > Identifier[name="${method}"])`;
            const results = query(AST, selector);
            // router.{get,post,delete,put,use}
            return results.flatMap((node) => {
                var _a, _b, _c, _d;
                const pathValue = node.arguments[0] !== undefined &&
                    node.arguments[0].type === "StringLiteral" &&
                    node.arguments[0].value;
                if (!pathValue) {
                    return []; // skip: it will only includes middleware
                }
                const middlewareArguments = method === "use"
                    ? // @ts-ignore
                        (_b = (_a = node.arguments) === null || _a === void 0 ? void 0 : _a.slice(1)) !== null && _b !== void 0 ? _b : []
                    : // @ts-ignore
                        (_d = (_c = node.arguments) === null || _c === void 0 ? void 0 : _c.slice(1, node.arguments.length - 1)) !== null && _d !== void 0 ? _d : [];
                const middlewares = middlewareArguments.map((arg) => {
                    return fileContent.slice(arg.start, arg.end);
                });
                return [
                    {
                        method,
                        path: pathValue,
                        middlewares,
                        // @ts-ignore
                        range: [node.start, node.end],
                        // @ts-ignore
                        loc: node.loc
                    }
                ];
            });
        };
        const methods = ["get", "post", "delete", "put", "use"];
        return methods.flatMap((method) => {
            return search(method, AST);
        });
    }
    catch (_a) {
        return [];
    }
};
const toAbsolute = (f) => {
    return path.resolve(process.cwd(), f);
};
export async function analyzeDependency({ outputFormat, rootDir, rootBaseUrl = "", includeOnly, doNotFollow }) {
    const ROOT_DIR = rootDir;
    const hasImportExpress = (dep) => {
        return ((dep.dependencyTypes.includes("npm") || dep.dependencyTypes.includes("npm-dev")) && dep.module === "express");
    };
    const underTheRoot = (module) => {
        return toAbsolute(module.source).startsWith(ROOT_DIR);
    };
    const hasModuleImportExpress = (module) => {
        return module.dependencies.some((dep) => hasImportExpress(dep));
    };
    const toRelative = (f) => {
        return path.relative(ROOT_DIR, toAbsolute(f));
    };
    const ARRAY_OF_FILES_AND_DIRS_TO_CRUISE = [ROOT_DIR];
    const cruiseResult = cruise(ARRAY_OF_FILES_AND_DIRS_TO_CRUISE, {
        includeOnly,
        doNotFollow
    });
    if (typeof cruiseResult.output !== "object") {
        throw new Error("NO OUTPUT");
    }
    const modules = cruiseResult.output.modules.filter(hasModuleImportExpress).filter(underTheRoot);
    const allResults = await Promise.all(modules.map(async (mo) => {
        return {
            filePath: toAbsolute(mo.source),
            routers: await findRouting(toAbsolute(mo.source))
        };
    }));
    if (outputFormat === "markdown") {
        const table = [["File", "Method", "Routing", "Middlewares", "FilePath"]];
        for (const result of allResults) {
            table.push([`${rootBaseUrl}${toRelative(result.filePath)}`]);
            result.routers.forEach((router) => {
                table.push([
                    "",
                    router.method,
                    router.path,
                    router.middlewares.join(", ").split(/\r?\n/g).join(" "),
                    `${rootBaseUrl}${toRelative(result.filePath)}#L${router.loc.start.line}-L${router.loc.end.line}`
                ]);
            });
        }
        return markdownTable(table);
    }
    else {
        return allResults;
    }
}
//# sourceMappingURL=index.js.map